#include "AccountSystem.h"
#include <iostream>

AccountSystem::AccountSystem() 
    : dataManager(), authManager(dataManager), walletManager(dataManager, authManager) {
}

void AccountSystem::start() {
    std::cout << "Starting Account Management System..." << std::endl;
    
    if (!dataManager.loadData()) {
        std::cout << "Warning: Failed to load existing data." << std::endl;
    }
    
    std::cout << "System started successfully." << std::endl;
}

void AccountSystem::shutdown() {
    std::cout << "Shutting down Account Management System..." << std::endl;
    
    if (!dataManager.saveData()) {
        std::cout << "Warning: Failed to save data." << std::endl;
    }
    
    std::cout << "System shutdown complete." << std::endl;
}

bool AccountSystem::registerUser(const std::string& username, 
                               const std::string& password, 
                               const std::string& fullName,
                               const std::string& email,
                               const std::string& phoneNumber) {
    if (dataManager.userExists(username)) {
        std::cout << "Username already exists." << std::endl;
        return false;
    }
    
    bool success = authManager.registerUser(username, password, fullName, email, phoneNumber);
    
    if (success) {
        std::string walletId = walletManager.createWallet(username);
        std::cout << "Wallet created for user: " << username << " with ID: " << walletId << std::endl;
        dataManager.saveData();
    }
    
    return success;
}

bool AccountSystem::registerUserByAdmin(const std::string& username, 
                                      const std::string& fullName,
                                      const std::string& email,
                                      const std::string& phoneNumber) {
    if (!isAdmin()) {
        std::cout << "Only administrators can register new users." << std::endl;
        return false;
    }
    
    if (dataManager.userExists(username)) {
        std::cout << "Username already exists." << std::endl;
        return false;
    }
    
    bool success = authManager.registerUserByAdmin(username, fullName, email, phoneNumber);
    
    if (success) {
        std::string walletId = walletManager.createWallet(username);
        std::cout << "Wallet created for user: " << username << " with ID: " << walletId << std::endl;
    }
    
    return success;
}

bool AccountSystem::updateUserProfile(const std::string& username,
                                    const std::string& fullName,
                                    const std::string& email,
                                    const std::string& phoneNumber,
                                    const std::string& otpCode) {
    User* user = dataManager.getUser(username);
    if (!user) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    if (authManager.getCurrentUser() != username && !isAdmin()) {
        std::cout << "Permission denied. Only the user or an admin can update profile." << std::endl;
        return false;
    }
    
    if (!authManager.verifyOTP(username, otpCode)) {
        std::cout << "Invalid OTP. Profile update cancelled." << std::endl;
        return false;
    }
    
    user->setFullName(fullName);
    user->setEmail(email);
    user->setPhoneNumber(phoneNumber);
    
    bool success = dataManager.saveUser(*user);
    if (success) {
        std::cout << "Profile for " << username << " updated successfully." << std::endl;
        dataManager.saveData();
    } else {
        std::cout << "Failed to update profile for " << username << "." << std::endl;
    }
    
    return success;
}

bool AccountSystem::login(const std::string& username, const std::string& password) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found: " << username << std::endl;
        return false;
    }
    
    User* user = dataManager.getUser(username);
    if (!user) {
        std::cout << "Error retrieving user data." << std::endl;
        return false;
    }
    
    bool success = authManager.login(username, password);
    
    if (success) {
        user->setLastLoginDate(time(NULL));
        dataManager.saveUser(*user);
        
        std::cout << "Login successful for user: " << username << std::endl;
        
        if (user->getIsAutoGeneratedPassword()) {
            std::cout << "IMPORTANT: Your account is using an auto-generated password. " << std::endl;
            std::cout << "You will be required to change your password immediately." << std::endl;
        }
    } else {
        std::cout << "Login failed: Incorrect password for " << username << std::endl;
    }
    
    return success;
}

void AccountSystem::logout() {
    authManager.logout();
}

bool AccountSystem::changePassword(const std::string& oldPassword, const std::string& newPassword, const std::string& otpCode) {
    if (!isLoggedIn()) {
        std::cout << "Not logged in." << std::endl;
        return false;
    }
    
    std::string username = authManager.getCurrentUser();
    
    // Verify OTP before changing password
    if (!authManager.verifyOTP(username, otpCode)) {
        std::cout << "Invalid OTP. Password change cancelled." << std::endl;
        return false;
    }
    
    bool success = authManager.changePassword(username, oldPassword, newPassword);
    
    if (success) {
        User* user = dataManager.getUser(username);
        if (user) {
            user->setIsAutoGeneratedPassword(false);
            user->setIsFirstLogin(false);
            dataManager.saveUser(*user);
        }
    }
    
    return success;
}

bool AccountSystem::resetPassword(const std::string& username, const std::string& otpCode) {
    if (authManager.getCurrentUser() != username && !isAdmin()) {
        std::cout << "Permission denied." << std::endl;
        return false;
    }
    
    // Verify OTP before resetting password
    if (!authManager.verifyOTP(username, otpCode)) {
        std::cout << "Invalid OTP. Password reset cancelled." << std::endl;
        return false;
    }
    
    bool success = authManager.resetPassword(username);
    
    if (success) {
        User* user = dataManager.getUser(username);
        if (user) {
            user->setIsAutoGeneratedPassword(true);
            user->setIsFirstLogin(true);
            dataManager.saveUser(*user);
        }
    }
    
    return success;
}

bool AccountSystem::generateOTP(const std::string& username, const std::string& purpose) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    User* user = dataManager.getUser(username);
    if (!user) {
        std::cout << "Error retrieving user data." << std::endl;
        return false;
    }
    
    std::string enhancedPurpose = purpose;
    
    if (purpose == "profile_update" || purpose == "admin_profile_update") {
        enhancedPurpose += " - Changes to personal information";
    }
    
    std::cout << "--------------------------------------------" << std::endl;
    std::cout << "NOTIFICATION: An OTP has been generated for " << username << std::endl;
    std::cout << "Purpose: " << enhancedPurpose << std::endl;
    std::cout << "To verify your identity, please use this OTP to approve the changes." << std::endl;
    
    bool result = authManager.generateOTP(username, enhancedPurpose);
    
    std::cout << "--------------------------------------------" << std::endl;
    
    return result;
}

bool AccountSystem::verifyOTP(const std::string& username, const std::string& otpCode) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    return authManager.verifyOTP(username, otpCode);
}

// TOTP (Two-Factor Authentication) methods

bool AccountSystem::setupTOTP(const std::string& username) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    // Only the user themselves or an admin can set up TOTP
    if (authManager.getCurrentUser() != username && !isAdmin()) {
        std::cout << "Permission denied. Only the user or an admin can set up 2FA." << std::endl;
        return false;
    }
    
    return authManager.setupTOTP(username);
}

bool AccountSystem::verifyTOTP(const std::string& username, const std::string& totpCode) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    return authManager.verifyTOTP(username, totpCode);
}

bool AccountSystem::disableTOTP(const std::string& username) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    // Only the user themselves or an admin can disable TOTP
    if (authManager.getCurrentUser() != username && !isAdmin()) {
        std::cout << "Permission denied. Only the user or an admin can disable 2FA." << std::endl;
        return false;
    }
    
    User* user = dataManager.getUser(username);
    if (!user) {
        std::cout << "Error retrieving user data." << std::endl;
        return false;
    }
    
    if (!user->isTOTPEnabled()) {
        std::cout << "TOTP is not enabled for this user." << std::endl;
        return false;
    }
    
    user->enableTOTP(false);
    bool success = dataManager.saveUser(*user);
    
    if (success) {
        std::cout << "TOTP disabled for user: " << username << std::endl;
        dataManager.saveData();
    } else {
        std::cout << "Failed to disable TOTP for user: " << username << std::endl;
    }
    
    return success;
}

bool AccountSystem::isTOTPEnabled(const std::string& username) {
    if (!dataManager.userExists(username)) {
        std::cout << "User not found." << std::endl;
        return false;
    }
    
    User* user = dataManager.getUser(username);
    if (!user) {
        std::cout << "Error retrieving user data." << std::endl;
        return false;
    }
    
    return user->isTOTPEnabled();
}

std::string AccountSystem::createWallet(const std::string& ownerUsername) {
    if (!dataManager.userExists(ownerUsername)) {
        std::cout << "User not found." << std::endl;
        return "";
    }
    
    return walletManager.createWallet(ownerUsername);
}

double AccountSystem::getWalletBalance(const std::string& walletId) {
    return walletManager.getBalance(walletId);
}

Wallet* AccountSystem::getCurrentUserWallet() {
    if (!isLoggedIn()) {
        return NULL;
    }
    
    std::string username = getCurrentUser();
    return dataManager.getWalletByOwner(username);
}

std::vector<Transaction> AccountSystem::getTransactionHistory(const std::string& walletId) {
    return walletManager.getTransactionHistory(walletId);
}

Transaction* AccountSystem::getTransaction(const std::string& transactionId) {
    return dataManager.getTransaction(transactionId);
}

std::string AccountSystem::getTransactionStatusString(const std::string& transactionId) {
    Transaction* transaction = dataManager.getTransaction(transactionId);
    if (transaction) {
        return transaction->getStatusString();
    }
    return "Unknown";
}

void AccountSystem::displayTransactionSummary(const std::string& walletId) {
    Wallet* wallet = dataManager.getWallet(walletId);
    if (!wallet) {
        std::cout << "Wallet not found." << std::endl;
        return;
    }
    
    std::vector<Transaction> transactions = getTransactionHistory(walletId);
    std::cout << "===== Transaction Summary for Wallet: " << walletId << " =====" << std::endl;
    std::cout << "Current Balance: " << wallet->getBalance() << std::endl;
    std::cout << "Total Transactions: " << transactions.size() << std::endl;
    
    int completed = 0, pending = 0, failed = 0, cancelled = 0;
    double totalSent = 0.0, totalReceived = 0.0;
    
    for (size_t i = 0; i < transactions.size(); ++i) {
        const Transaction& tx = transactions[i];
        
        switch (tx.getStatus()) {
            case COMPLETED: completed++; break;
            case PENDING: pending++; break;
            case FAILED: failed++; break;
            case CANCELLED: cancelled++; break;
        }
        
        if (tx.getStatus() == COMPLETED) {
            if (tx.getSenderWalletId() == walletId) {
                totalSent += tx.getAmount();
            }
            if (tx.getReceiverWalletId() == walletId) {
                totalReceived += tx.getAmount();
            }
        }
    }
    
    std::cout << "Completed Transactions: " << completed << std::endl;
    std::cout << "Pending Transactions: " << pending << std::endl;
    std::cout << "Failed Transactions: " << failed << std::endl;
    std::cout << "Cancelled Transactions: " << cancelled << std::endl;
    std::cout << "Total Points Sent: " << totalSent << std::endl;
    std::cout << "Total Points Received: " << totalReceived << std::endl;
    std::cout << "=================================================" << std::endl;
}

void AccountSystem::displayTransactionDetails(const std::string& transactionId) {
    Transaction* transaction = dataManager.getTransaction(transactionId);
    if (!transaction) {
        std::cout << "Transaction not found." << std::endl;
        return;
    }
    
    std::cout << "===== Transaction Details =====" << std::endl;
    std::cout << "Transaction ID: " << transaction->getTransactionId() << std::endl;
    
    std::string senderWalletId = transaction->getSenderWalletId();
    std::string receiverWalletId = transaction->getReceiverWalletId();
    
    Wallet* senderWallet = dataManager.getWallet(senderWalletId);
    Wallet* receiverWallet = dataManager.getWallet(receiverWalletId);
    
    std::cout << "Sender Wallet: " << senderWalletId;
    if (senderWallet) {
        std::cout << " (Owner: " << senderWallet->getOwnerUsername() << ")";
    }
    std::cout << std::endl;
    
    std::cout << "Receiver Wallet: " << receiverWalletId;
    if (receiverWallet) {
        std::cout << " (Owner: " << receiverWallet->getOwnerUsername() << ")";
    }
    std::cout << std::endl;
    
    std::cout << "Amount: " << transaction->getAmount() << std::endl;
    
    // Format date/time
    time_t timestamp = transaction->getTimestamp();
    char dateStr[100];
    strftime(dateStr, sizeof(dateStr), "%Y-%m-%d %H:%M:%S", localtime(&timestamp));
    
    std::cout << "Date/Time: " << dateStr << std::endl;
    std::cout << "Status: " << transaction->getStatusString() << std::endl;
    std::cout << "Description: " << transaction->getDescription() << std::endl;
    std::cout << "================================" << std::endl;
}

std::vector<Transaction> AccountSystem::getTransactionsByStatus(const std::string& walletId, TransactionStatus status) {
    std::vector<Transaction> allTransactions = getTransactionHistory(walletId);
    std::vector<Transaction> filteredTransactions;
    
    for (size_t i = 0; i < allTransactions.size(); ++i) {
        if (allTransactions[i].getStatus() == status) {
            filteredTransactions.push_back(allTransactions[i]);
        }
    }
    
    return filteredTransactions;
}

bool AccountSystem::transferPoints(const std::string& receiverWalletId,
                                 double amount,
                                 const std::string& otpCode,
                                 const std::string& description) {
    if (!isLoggedIn()) {
        std::cout << "Not logged in." << std::endl;
        return false;
    }
    
    Wallet* senderWallet = walletManager.getCurrentUserWallet();
    if (!senderWallet) {
        std::cout << "Sender wallet not found." << std::endl;
        return false;
    }
    
    return walletManager.transferPoints(
        senderWallet->getWalletId(),
        receiverWalletId,
        amount,
        otpCode,
        description
    );
}

bool AccountSystem::initiateTransfer(const std::string& receiverWalletId, 
                                   double amount,
                                   const std::string& description) {
    if (!isLoggedIn()) {
        std::cout << "Not logged in." << std::endl;
        return false;
    }
    
    Wallet* senderWallet = walletManager.getCurrentUserWallet();
    if (!senderWallet) {
        std::cout << "Sender wallet not found." << std::endl;
        return false;
    }
    
    // Validate receiver wallet exists before generating OTP
    Wallet* receiverWallet = dataManager.getWallet(receiverWalletId);
    if (!receiverWallet) {
        std::cout << "Receiver wallet not found." << std::endl;
        return false;
    }
    
    // Validate sender has enough balance before proceeding
    if (senderWallet->getBalance() < amount) {
        std::cout << "Insufficient balance for transfer. Cannot proceed." << std::endl;
        return false;
    }
    
    return walletManager.initiateTransfer(
        senderWallet->getWalletId(),
        receiverWalletId,
        amount,
        description
    );
}

bool AccountSystem::confirmTransfer(const std::string& receiverWalletId,
                                  double amount,
                                  const std::string& otpCode,
                                  const std::string& description) {
    if (!isLoggedIn()) {
        std::cout << "Not logged in." << std::endl;
        return false;
    }
    
    Wallet* senderWallet = walletManager.getCurrentUserWallet();
    if (!senderWallet) {
        std::cout << "Sender wallet not found." << std::endl;
        return false;
    }
    
    return walletManager.confirmTransfer(
        senderWallet->getWalletId(),
        receiverWalletId,
        amount,
        otpCode,
        description
    );
}

std::vector<User> AccountSystem::getAllUsers() {
    if (!isAdmin()) {
        std::cout << "Only administrators can view all users." << std::endl;
        return std::vector<User>();
    }
    
    return dataManager.getAllUsers();
}

bool AccountSystem::isAdmin() const {
    return authManager.isAdmin();
}

bool AccountSystem::isLoggedIn() const {
    return authManager.isLoggedIn();
}

std::string AccountSystem::getCurrentUser() const {
    return authManager.getCurrentUser();
}

// Admin function to add funds to any wallet - only admins can use this
bool AccountSystem::adminAddFundsToWallet(const std::string& walletId, double amount, const std::string& otpCode) {
    // Check if user is logged in and is an admin
    if (!isLoggedIn()) {
        std::cout << "Not logged in." << std::endl;
        return false;
    }
    
    if (!isAdmin()) {
        std::cout << "Permission denied. Only administrators can add funds to wallets." << std::endl;
        return false;
    }
    
    // Validate wallet exists
    Wallet* wallet = dataManager.getWallet(walletId);
    if (!wallet) {
        std::cout << "Wallet not found." << std::endl;
        return false;
    }
    
    // Verify OTP before adding funds
    std::string adminUsername = authManager.getCurrentUser();
    if (!authManager.verifyOTP(adminUsername, otpCode)) {
        std::cout << "Invalid OTP. Adding funds cancelled." << std::endl;
        return false;
    }
    
    // Use WalletManager to add the funds
    bool success = walletManager.addFundsToWallet(walletId, amount);
    
    if (success) {
        std::cout << "Successfully added " << amount << " points to wallet: " << walletId << std::endl;
        std::cout << "New balance: " << wallet->getBalance() << " points" << std::endl;
    } else {
        std::cout << "Failed to add funds to wallet." << std::endl;
    }
    
    return success;
}

std::vector<Wallet> AccountSystem::getAllWallets() {
    return dataManager.getAllWallets();
} 
