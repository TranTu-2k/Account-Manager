#ifndef USER_H
#define USER_H

#include <string>
#include <vector>
#include <ctime>

enum UserRole {
    REGULAR,
    ADMIN
};

class User {
private:
    std::string username;
    std::string passwordHash;
    std::string fullName;
    std::string email;
    std::string phoneNumber;
    UserRole role;
    bool isAutoGeneratedPassword;
    bool isFirstLogin;
    time_t creationDate;
    time_t lastLoginDate;
    std::string totpSecret; // TOTP secret key
    bool totpEnabled;       // Whether TOTP is enabled for this user

public:
    User();
    User(const std::string& username, 
         const std::string& passwordHash, 
         const std::string& fullName,
         const std::string& email,
         const std::string& phoneNumber,
         UserRole role = REGULAR);

    std::string getUsername() const;
    std::string getPasswordHash() const;
    std::string getFullName() const;
    std::string getEmail() const;
    std::string getPhoneNumber() const;
    UserRole getRole() const;
    bool getIsAutoGeneratedPassword() const;
    bool getIsFirstLogin() const;
    time_t getCreationDate() const;
    time_t getLastLoginDate() const;
    std::string getTOTPSecret() const; // Get TOTP secret key
    bool isTOTPEnabled() const;        // Check if TOTP is enabled

    void setFullName(const std::string& fullName);
    void setEmail(const std::string& email);
    void setPhoneNumber(const std::string& phoneNumber);
    void setPasswordHash(const std::string& passwordHash);
    void setIsAutoGeneratedPassword(bool isAuto);
    void setIsFirstLogin(bool isFirst);
    void setLastLoginDate(time_t date);
    void setTOTPSecret(const std::string& secret); // Set TOTP secret
    void enableTOTP(bool enable = true);           // Enable or disable TOTP

    bool isAdmin() const;
};

#endif 